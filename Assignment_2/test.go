package main

import (
	"fmt"
	"math/rand"
	"runtime"
	"time"
)

func main() {
	Test1()
	Test2()
}

func Test1() {
	strArray := [][]string{
		//{"ABCAABCAA", "ABBCAACCBBBBBB"},
		//{"ABCBDAB", "BDCABA"},
		{"A", "A"},
		{"AA", "AA"},
		{"AAAA", "AAAA"},
		{"AAAAAAAA", "AAAAAAAA"},
		{"AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA"},
		{"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},
		{"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},
		{"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},
		{"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},
		{},
		{"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},
	}
	for _, strs := range strArray {
		var m runtime.MemStats
		start := time.Now()
		//weight, str1, str2, dp := lcs(strs[0], strs[1])
		weight, str1, str2, _ := lcs(strs[0], strs[1])
		elapsed := time.Since(start)
		//for _, v := range dp {
		//	for _, i := range v {
		//		fmt.Printf("%7.4f\t", i)
		//	}
		//	fmt.Println()
		//}
		runtime.ReadMemStats(&m)
		//fmt.Printf("time is %s\n", elapsed)
		fmt.Printf("Str1 is %s\nStr2 is %s\nThe weight of LCS is %0.5f\nSubstr1 is %s\nSubstr2 is %s\ntime is %s\n", strs[0], strs[1], weight, str1, str2, elapsed)
		mb := 1024 * 1024.0
		//fmt.Printf("Alloc = %v mb\nTotalAlloc = %v mb\nSys = %v mb\nNumGC = %v\n\n", float64(m.Alloc)/mb, float64(m.TotalAlloc)/mb, float64(m.Sys)/mb, m.NumGC)
		fmt.Printf("Alloc = %v mb\nTotalAlloc = %v mb\n\n", float64(m.Alloc)/mb, float64(m.TotalAlloc)/mb)
	}
}

func Test2() {
	//pointsArray := []points{
	//	{
	//		{0, 1}, {0, 2}, {1, 1},
	//		{1, 4}, {3, 4}, {4, 4},
	//	},
	//	{
	//		{1, 1.5}, {2, 1.5}, {4, 1.5},
	//		{6, 1.5}, {8, 4}, {10, 6.5},
	//		{9, 5.25}, {11, 7.75}, {12, 9},
	//		{15, 12.75}, {19, 17.75}, {25, 25.5},
	//	},
	//	{
	//		{1, 1.5}, {2, 1.5}, {4, 1.5},
	//		{6, 1.5}, {8, 4}, {10, 6.5},
	//		{9, 5.25}, {11, 7.75}, {12, 9},
	//		{15, 12.75}, {19, 17.75}, {25, 25.5},
	//		{1, 2.5}, {2, 3.5}, {4, 2.5},
	//		{6, 2.5}, {8, 5}, {10, 7.5},
	//		{9, 6.25}, {11, 8.75}, {12, 10},
	//		{15, 13.75}, {19, 14.75}, {25, 26.5},
	//	},
	//}
	num := []int{1, 10, 20, 50, 100, 150, 200, 300, 500}
	var pointsArray []points
	for _, v := range num {
		tmpps := points{}
		for i := 0; i < v; i++ {
			var tmpp []float64
			x := rand.Intn(v)
			y := rand.Float64() * float64(v)
			tmpp = append(tmpp, float64(x), y)
			tmpps = append(tmpps, tmpp)
		}
		pointsArray = append(pointsArray, tmpps)
	}
	//fmt.Println(pointsArray)
	for _, ps := range pointsArray {
		var m runtime.MemStats
		start := time.Now()
		result, cost := SLS(ps, 0.5)
		elapsed := time.Since(start)
		runtime.ReadMemStats(&m)
		fmt.Printf("Cost is %f\n", cost)
		for _, v := range result {
			fmt.Printf(v)
		}
		fmt.Printf("time is %s\n", elapsed)
		mb := 1024 * 1024.0
		fmt.Printf("Alloc = %v mb\nTotalAlloc = %v mb\n\n", float64(m.Alloc)/mb, float64(m.TotalAlloc)/mb)
		fmt.Println()
	}
}
